package models

/* monitor >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

func UpTaskStatByTid(ttype, tid string, newstat int64) (int64, error) {
	sqlStr := fmt.Sprintf("UPDATE `tasks_%s` SET `stat`=? WHERE `tid`=?", ttype)
	return db.Update(sqlStr, newstat, tid)
}

func InfoData(ttype, tid string) ([]map[string]string, error) {
	sqlStr := fmt.Sprintf("SELECT * FROM `tasks_%s` WHERE `tid`=?", ttype)
	rst, err := db.Query(sqlStr, tid)
	if err != nil {
		return nil, err
	}

	return rst, nil
}

func GetCount(ttype string) (ncout, icout, scout, ecout int64, err error) {
	var rst []map[string]string
	sqlStr := fmt.Sprintf("SELECT `stat`, count(0) cou FROM `tasks_%s` GROUP BY `stat`", ttype)
	rst, err = db.Query(sqlStr)
	if err != nil {
		return
	}

	for _, nv := range rst {
		ri, _ := strconv.ParseInt(nv["cou"], 10, 64)

		switch nv["stat"] {
		case "1":
			ncout = ri
		case "2":
			icout = ri
		case "3":
			scout = ri
		case "-1":
			ecout = ri
		}
	}

	return
}

func GetRecord(ttype string) (nr, ir, er []string, err error) {
	const NUM = 20
	var rst []map[string]string
	sqlStr := fmt.Sprintf("select tid,stat from(select @gid:=@cgid,@cgid:=t1.stat,if(@gid=@cgid,@rank:=@rank+1,@rank:=1) rank,t1.* FROM (select tid,stat from `tasks_%s` ORDER BY `id` DESC) t1,(select @gid:=1,@cgid:=1,@rank:=1) t2)t3 where t3.rank<=%d", ttype, NUM)
	rst, err = db.Query(sqlStr)
	if err != nil {
		return
	}

	for _, nv := range rst {
		switch nv["stat"] {
		case "1":
			nr = append(nr, nv["tid"])
		case "2":
			ir = append(ir, nv["tid"])
		case "3":
		case "-1":
			er = append(er, nv["tid"])
		}
	}

	return
}
/* monitor <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
